// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stateproto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stateproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stateproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stateproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stateproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stateproto_2eproto;
class ImageInfoProto;
class ImageInfoProtoDefaultTypeInternal;
extern ImageInfoProtoDefaultTypeInternal _ImageInfoProto_default_instance_;
class StateProto;
class StateProtoDefaultTypeInternal;
extern StateProtoDefaultTypeInternal _StateProto_default_instance_;
class TagProto;
class TagProtoDefaultTypeInternal;
extern TagProtoDefaultTypeInternal _TagProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ImageInfoProto* Arena::CreateMaybeMessage<::ImageInfoProto>(Arena*);
template<> ::StateProto* Arena::CreateMaybeMessage<::StateProto>(Arena*);
template<> ::TagProto* Arena::CreateMaybeMessage<::TagProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TagProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TagProto) */ {
 public:
  TagProto();
  virtual ~TagProto();

  TagProto(const TagProto& from);
  TagProto(TagProto&& from) noexcept
    : TagProto() {
    *this = ::std::move(from);
  }

  inline TagProto& operator=(const TagProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagProto& operator=(TagProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagProto* internal_default_instance() {
    return reinterpret_cast<const TagProto*>(
               &_TagProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TagProto& a, TagProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TagProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagProto* New() const final {
    return CreateMaybeMessage<TagProto>(nullptr);
  }

  TagProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagProto& from);
  void MergeFrom(const TagProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TagProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stateproto_2eproto);
    return ::descriptor_table_stateproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagNameFieldNumber = 1,
  };
  // string tag_name = 1;
  void clear_tag_name();
  const std::string& tag_name() const;
  void set_tag_name(const std::string& value);
  void set_tag_name(std::string&& value);
  void set_tag_name(const char* value);
  void set_tag_name(const char* value, size_t size);
  std::string* mutable_tag_name();
  std::string* release_tag_name();
  void set_allocated_tag_name(std::string* tag_name);
  private:
  const std::string& _internal_tag_name() const;
  void _internal_set_tag_name(const std::string& value);
  std::string* _internal_mutable_tag_name();
  public:

  // @@protoc_insertion_point(class_scope:TagProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stateproto_2eproto;
};
// -------------------------------------------------------------------

class ImageInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageInfoProto) */ {
 public:
  ImageInfoProto();
  virtual ~ImageInfoProto();

  ImageInfoProto(const ImageInfoProto& from);
  ImageInfoProto(ImageInfoProto&& from) noexcept
    : ImageInfoProto() {
    *this = ::std::move(from);
  }

  inline ImageInfoProto& operator=(const ImageInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoProto& operator=(ImageInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageInfoProto* internal_default_instance() {
    return reinterpret_cast<const ImageInfoProto*>(
               &_ImageInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageInfoProto& a, ImageInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfoProto* New() const final {
    return CreateMaybeMessage<ImageInfoProto>(nullptr);
  }

  ImageInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfoProto& from);
  void MergeFrom(const ImageInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stateproto_2eproto);
    return ::descriptor_table_stateproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kPathFieldNumber = 1,
  };
  // repeated .TagProto tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::TagProto* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TagProto >*
      mutable_tags();
  private:
  const ::TagProto& _internal_tags(int index) const;
  ::TagProto* _internal_add_tags();
  public:
  const ::TagProto& tags(int index) const;
  ::TagProto* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TagProto >&
      tags() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ImageInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TagProto > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stateproto_2eproto;
};
// -------------------------------------------------------------------

class StateProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StateProto) */ {
 public:
  StateProto();
  virtual ~StateProto();

  StateProto(const StateProto& from);
  StateProto(StateProto&& from) noexcept
    : StateProto() {
    *this = ::std::move(from);
  }

  inline StateProto& operator=(const StateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateProto& operator=(StateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateProto* internal_default_instance() {
    return reinterpret_cast<const StateProto*>(
               &_StateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StateProto& a, StateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateProto* New() const final {
    return CreateMaybeMessage<StateProto>(nullptr);
  }

  StateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateProto& from);
  void MergeFrom(const StateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stateproto_2eproto);
    return ::descriptor_table_stateproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageInfoFieldNumber = 1,
  };
  // repeated .ImageInfoProto image_info = 1;
  int image_info_size() const;
  private:
  int _internal_image_info_size() const;
  public:
  void clear_image_info();
  ::ImageInfoProto* mutable_image_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageInfoProto >*
      mutable_image_info();
  private:
  const ::ImageInfoProto& _internal_image_info(int index) const;
  ::ImageInfoProto* _internal_add_image_info();
  public:
  const ::ImageInfoProto& image_info(int index) const;
  ::ImageInfoProto* add_image_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageInfoProto >&
      image_info() const;

  // @@protoc_insertion_point(class_scope:StateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageInfoProto > image_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stateproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TagProto

// string tag_name = 1;
inline void TagProto::clear_tag_name() {
  tag_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TagProto::tag_name() const {
  // @@protoc_insertion_point(field_get:TagProto.tag_name)
  return _internal_tag_name();
}
inline void TagProto::set_tag_name(const std::string& value) {
  _internal_set_tag_name(value);
  // @@protoc_insertion_point(field_set:TagProto.tag_name)
}
inline std::string* TagProto::mutable_tag_name() {
  // @@protoc_insertion_point(field_mutable:TagProto.tag_name)
  return _internal_mutable_tag_name();
}
inline const std::string& TagProto::_internal_tag_name() const {
  return tag_name_.GetNoArena();
}
inline void TagProto::_internal_set_tag_name(const std::string& value) {
  
  tag_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TagProto::set_tag_name(std::string&& value) {
  
  tag_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TagProto.tag_name)
}
inline void TagProto::set_tag_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TagProto.tag_name)
}
inline void TagProto::set_tag_name(const char* value, size_t size) {
  
  tag_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TagProto.tag_name)
}
inline std::string* TagProto::_internal_mutable_tag_name() {
  
  return tag_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TagProto::release_tag_name() {
  // @@protoc_insertion_point(field_release:TagProto.tag_name)
  
  return tag_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TagProto::set_allocated_tag_name(std::string* tag_name) {
  if (tag_name != nullptr) {
    
  } else {
    
  }
  tag_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag_name);
  // @@protoc_insertion_point(field_set_allocated:TagProto.tag_name)
}

// -------------------------------------------------------------------

// ImageInfoProto

// string path = 1;
inline void ImageInfoProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageInfoProto::path() const {
  // @@protoc_insertion_point(field_get:ImageInfoProto.path)
  return _internal_path();
}
inline void ImageInfoProto::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ImageInfoProto.path)
}
inline std::string* ImageInfoProto::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ImageInfoProto.path)
  return _internal_mutable_path();
}
inline const std::string& ImageInfoProto::_internal_path() const {
  return path_.GetNoArena();
}
inline void ImageInfoProto::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageInfoProto::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageInfoProto.path)
}
inline void ImageInfoProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageInfoProto.path)
}
inline void ImageInfoProto::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageInfoProto.path)
}
inline std::string* ImageInfoProto::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageInfoProto::release_path() {
  // @@protoc_insertion_point(field_release:ImageInfoProto.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfoProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ImageInfoProto.path)
}

// repeated .TagProto tags = 2;
inline int ImageInfoProto::_internal_tags_size() const {
  return tags_.size();
}
inline int ImageInfoProto::tags_size() const {
  return _internal_tags_size();
}
inline void ImageInfoProto::clear_tags() {
  tags_.Clear();
}
inline ::TagProto* ImageInfoProto::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ImageInfoProto.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TagProto >*
ImageInfoProto::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ImageInfoProto.tags)
  return &tags_;
}
inline const ::TagProto& ImageInfoProto::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::TagProto& ImageInfoProto::tags(int index) const {
  // @@protoc_insertion_point(field_get:ImageInfoProto.tags)
  return _internal_tags(index);
}
inline ::TagProto* ImageInfoProto::_internal_add_tags() {
  return tags_.Add();
}
inline ::TagProto* ImageInfoProto::add_tags() {
  // @@protoc_insertion_point(field_add:ImageInfoProto.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TagProto >&
ImageInfoProto::tags() const {
  // @@protoc_insertion_point(field_list:ImageInfoProto.tags)
  return tags_;
}

// -------------------------------------------------------------------

// StateProto

// repeated .ImageInfoProto image_info = 1;
inline int StateProto::_internal_image_info_size() const {
  return image_info_.size();
}
inline int StateProto::image_info_size() const {
  return _internal_image_info_size();
}
inline void StateProto::clear_image_info() {
  image_info_.Clear();
}
inline ::ImageInfoProto* StateProto::mutable_image_info(int index) {
  // @@protoc_insertion_point(field_mutable:StateProto.image_info)
  return image_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageInfoProto >*
StateProto::mutable_image_info() {
  // @@protoc_insertion_point(field_mutable_list:StateProto.image_info)
  return &image_info_;
}
inline const ::ImageInfoProto& StateProto::_internal_image_info(int index) const {
  return image_info_.Get(index);
}
inline const ::ImageInfoProto& StateProto::image_info(int index) const {
  // @@protoc_insertion_point(field_get:StateProto.image_info)
  return _internal_image_info(index);
}
inline ::ImageInfoProto* StateProto::_internal_add_image_info() {
  return image_info_.Add();
}
inline ::ImageInfoProto* StateProto::add_image_info() {
  // @@protoc_insertion_point(field_add:StateProto.image_info)
  return _internal_add_image_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageInfoProto >&
StateProto::image_info() const {
  // @@protoc_insertion_point(field_list:StateProto.image_info)
  return image_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stateproto_2eproto
